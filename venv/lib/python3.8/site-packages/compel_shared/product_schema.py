from marshmallow import Schema
from marshmallow.fields import Str, Dict, List, Int, Nested, Float, Raw
from marshmallow_union import Union

from compel_shared.schema import CRUDSchema, pick_field_data


class ProductNameSchema(Schema):
    value = Str(required=True,
                title='Наименование',
                description='Наименование продукта',
                example='RES 0402 41R2 1%')
    value_norm = Str(required=True,
                     title='Нормированное наименование',
                     description=f'Нормированное наименование продукта без пробелов и спецсимволов',
                     example='RES040241R21')
    provider = Str(title='Поставщик')
    source_type = Str(required=True, title='Источник происхождения',
                      description='''
Тип выгрузки откуда брались данные:
* HD - hd_items
* SEARCH_NAMES - ax_search
* DGK - tmp_dgk                                         
''')


class MpnManSchema(Schema):
    '''
    Пара MPN/код производителя - используется для универсальной идентификации продукта.
    '''
    mpn = Str(required=True, title='MPN',
              description='Manufacturing Part Number', example='MAX232DR')
    manufacturer = Str(required=True,
                       title='Код производителя',
                       description='Универсальный код производителя в системе', example='TI')


class ProductSchema(CRUDSchema, MpnManSchema):
    '''
    Продукт (номенклатураная единица)
    '''
    params = Dict(title='Параметры продукта', description='Структура параметров и их значений',
                  example={
                      "resistance": "N:100.0",
                      "voltage": "N:250.0",
                      "tolerance": "N:5.0",
                      "case": [
                          "S:0201",
                          "S:0605"
                      ],
                      "dimension": [
                          {
                              "diameter": "N:0.004",
                              "height": "N:0.005"
                          },
                          "N:0.004"
                      ]
                  })
    axapta_id = Str(title='Axapta ID', description='ID связанного продукта в системе Axapta')
    axapta_class_id = Str(title='Axapta ID класса продукта', description='ID связанного класса в системе Axapta',
                          example='04060101')
    _class = Str(data_key='class', description='Код класса распознавания/сигнатуры продукта', example='RES')
    class_id = Str(title='ID класса', description='ID класса в каталоге к которому привязан продукт',
                   example='8Gg33hWQ8')
    names = List(Nested(ProductNameSchema, title='Наименование', description='Известные наименования продукта'),
                 title='Наименования')
    case = Str(title='Корпус', description='Код корпуса', example='BGA-448')


class DisplayValueSchema(Schema):
    val = Str(description='Значение параметра с кодировкой типа', example='N:2000.0\nS:X7R')
    _str = Str(data_key='str', description='Текстовое значение параметра', example='2ком')


class ProductSearchSchema(Schema):
    id = Union([Str(), List(Str)], attribute='_id', **pick_field_data(ProductSchema, 'id'))
    mpn = Union([Str(), List(Str)], **pick_field_data(ProductSchema, 'mpn'))
    manufacturer = Union([Str(), List(Str)], **pick_field_data(ProductSchema, 'manufacturer'))
    params = Dict(title='Параметры',
                  description='Фильтр по значениям параметров продукта',
                  example={
                      "resistance": 100,
                      "voltage": {'ac': 250},
                      "tolerance": {'$lt': 5},
                      "case": ["0201", "0605"]
                  })
    axapta_id = Union([Str(), List(Str)], **pick_field_data(ProductSchema, 'axapta_id'))
    axapta_class_id = Union([Str(), List(Str)], **pick_field_data(ProductSchema, 'axapta_class_id'))
    _class = Union([Str(), List(Str)], data_key='class', **pick_field_data(ProductSchema, '_class'))
    class_id = Union([Str(), List(Str)], **pick_field_data(ProductSchema, 'class_id'))
    name = Union([Str(), List(Str)], **pick_field_data(ProductNameSchema, 'value'))
    products = List(Nested(MpnManSchema, title='Пара mpn+manufacturer'), title='Пaры mpn+manufacturer')

    class Meta:
        ordered = True


class ProductSortFieldsSchema(Schema):
    mpn = Int(**pick_field_data(ProductSchema, 'mpn'))
    manufacturer = Int(**pick_field_data(ProductSchema, 'manufacturer'))
    params = Dict(**pick_field_data(ProductSchema, 'params', example=dict(resistance=1, voltage=dict(ac=-1))))


class ProductSortSchema(Schema):
    sort = Nested(ProductSortFieldsSchema,
                  title='Сортировка результатов по значениям полей', description='+1 по возрастанию, -1 по убыванию',
                  example=dict(name=1, params=ProductSortFieldsSchema().fields['params'].metadata['example']))


class ProductInfoSchema(Schema):
    names = List(Str(**pick_field_data(ProductNameSchema, 'value')))
    manufacturer_name = Str(title='Название производителя', description='Полное название производителя')


class RecognizedParamsSchema(Schema):
    '''
    Information about recognized parameters - for recog & bom
    '''
    mpn = List(Str(**pick_field_data(ProductSchema, 'mpn')))
    manufacturer = List(Str(**pick_field_data(ProductSchema, 'manufacturer')))
    _class = List(Str(**pick_field_data(ProductSchema, '_class')), data_key='class')
    params = Dict(**pick_field_data(ProductSchema, 'params', example=dict(resistance=[100], tolerance=[5],
                                                                          case=['0201', '0605'])))

    @staticmethod
    def to_plain_form(data):
        out = {k: data['params'][k] for k in data['params']}
        for k in data:
            if k != 'params':
                out[f'_{k}'] = data[k]
        return out


class ClientQuerySchema(Schema):
    name = Str(title='Поисковое наименование',
               description='Наименование продукта написанное словами клиента',
               example='SMD 0603 1.24 кОм 1%, 0.063W, 50V, -55-155°C', required=True)
    manufacturer = Str(title='Производитель', description='Название производителя словами клиента',
                       example='Texas Instruments')
    entities = List(List(Raw), description='Клиентская разметка поисковой строки',
                    example=[[0, 3, "mount"], [4, 8, "case"], [9, 17, "resistance"], [18, 20, "tolerance"],
                             [22, 28, "power"], [30, 33, "voltage"], [35, 44, "temperature"]])


class SearchRequestLineSchema(ClientQuerySchema):
    line_id = Str(title='Идентификатор строки', description='Идентификатор клиентской строки в произвольном формате',
                  example='A1')


class SignatureMixinSchema(Schema):
    signature = Str(title='Сигнатура',
                    description='Стандартное название продукта составленное из класса и параметров',
                    exmaple='RES 0201 6K65 0.5%')


class PriceMixinSchema(Schema):
    price = Float(title='Цена', description='Минимальная цена продукта', example=0.5)
