import logging
import re
from decimal import Decimal


D_ONE = Decimal(1)
D_ZERO = Decimal(0)

number_infix = '.,/'
number_expr = f'(\d+([{number_infix}]\d+)?([eE][+-]\d+)?)'

log = logging.getLogger(__name__)


def convert_value(v):
    if type(v) == list:
        return '/'.join([convert_value(e) for e in v])
    if type(v) == float:
        if int(v) == v:
            v = int(v)
    return f'{v:g}' if type(v) == float else str(v)


def get_measurement(text: str) -> Decimal:
    """
    Convert string to measurement value. Examples:  "1,2", "2.2", "1/16"
    :param text:
    :return: measurement value as Decimal
    """
    if re.search(r'^[0-9]+\-[0-9]+\/[0-9]+$', text):
        vals = [get_measurement(v) for v in text.split('-')]
        if len(vals) > 1:
            return vals[0] + vals[1]
        else:
            return vals[0]
    if '/' in text:
        vals = [get_measurement(v) for v in text.split('/')]
        if len(vals) > 1 and vals[1] != Decimal(0):
            return vals[0] / vals[1]
        else:
            return vals[0]
    return Decimal(re.sub('\\s', '', re.sub(',', '.', text))).normalize()


def compact(val):
    if isinstance(val, dict):
        return {k: compact(val[k]) for k in val.copy()}
    elif isinstance(val, list):
        if len(val) == 1:
            return compact(val[0])
        else:
            return [compact(e) for e in val]
    else:
        return val


def load_template_config_defaults(data):
    templates = {}
    for provider in data:
        for name in data[provider]:
            template = data[provider][name]
            template['provider'] = provider
            template['name'] = name
            templates[f'{provider}-{name}'] = template
    return templates
