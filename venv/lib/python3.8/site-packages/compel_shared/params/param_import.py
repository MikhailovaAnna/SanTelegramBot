import typing

from dataclasses import field
from marshmallow_dataclass import dataclass

from compel_shared.params.param import ParamRecog, ParamAnalytic
from compel_shared.schema import OrderedSchema, MongoIDSchema, pick_field_data


@dataclass(base_schema=OrderedSchema)
class ImportAnalytic(ParamAnalytic):
    value_count: int = field(default=0, metadata=dict(title='Кол-во уникальных значений', readonly=True))
    parsed_count: int = field(default=0, metadata=dict(title='Кол-во разобранных значений', readonly=True))

@dataclass
class Candidate:
    id: str

@dataclass(base_schema=MongoIDSchema)
class ParamImport:
    name: str = field(metadata=dict(title='Название исходного параметра', is_hidden=True))
    provider: str = field(metadata=dict(title='Поставщик', is_hidden=True))
    id: str = field(default=None, metadata=pick_field_data(MongoIDSchema, 'id', required=False, data_key='_id'))
    recog: ParamRecog = field(default=None, metadata=dict(
        title='Настройки распознавания',
        unwrap=True,
    ))
    analytic: ImportAnalytic = field(default=None,
                                     metadata=dict(title='Аналитика', unwrap=True, readonly=True))
    candidates: typing.List[Candidate] = field(
        default_factory=list, metadata=dict(is_hidden=True))
    target_id: str = field(default=None, metadata=dict(
        title='Параметр назначения',
        description='Параметр к которому привязываются параметры из данного параметра источника',
    ))

    class Meta(MongoIDSchema.Meta):
        fields = (
            'id',
            'name',
            'provider',
            'analytic',
            'recog',
            'candidates',
            'target_id'
        )
