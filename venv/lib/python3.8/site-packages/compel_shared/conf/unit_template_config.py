import typing

from etcd3 import AioClient

from compel_shared.conf.mongo_mem_cache import MongoMemCache
from compel_shared.params.unit import UnitTemplate


class UnitTemplateConfig(MongoMemCache):

    def __init__(self, db, etcd_client: AioClient, provider='default'):
        super().__init__(db, etcd_client, 'unit_template', UnitTemplate, provider=provider, key='_id')
        self._unit_names = list()

    async def get_units(self) -> typing.Dict[str, UnitTemplate]:
        return await self.get_model()

    async def get_unit(self, id):
        return await self.get_model(id=id)

    async def get_unit_names(self):
        if not self._unit_names:
            out = []
            units = await self.get_units()
            for unit_id in units:
                unit_template = units[unit_id]
                out.extend(unit_template.unit_names)
            self._unit_names = list(set(units))
        return self._unit_names

    def _clear_cache(self):
        super()._clear_cache()
        self._unit_names = list()
