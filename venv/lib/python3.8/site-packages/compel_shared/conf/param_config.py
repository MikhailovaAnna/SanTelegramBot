from typing import Dict, Set

from etcd3 import AioClient

from compel_shared.classes.classes_signature import Signature
from compel_shared.conf.mongo_mem_cache import MongoMemCache
from compel_shared.conf.recog_resolver import RecogResolver
from compel_shared.logger import get_logger
from compel_shared.params.param import Param

log = get_logger(__name__)


class ParamConfig(MongoMemCache):
    def __init__(self, db, etcd_client: AioClient, recog_resolver: RecogResolver):
        super().__init__(db, etcd_client, 'param', Param, key='code', exclude_fields={'analytic'},
                         query={'code': {'$exists': True}}, size=110)
        self._unit_names = set()
        self._signatures_cache = None
        self.recog_resolver = recog_resolver
        self._all_param_codes = None
        for m in [self.recog_resolver.rtc.add_on_change,
                  self.recog_resolver.utc.add_on_change,
                  self.recog_resolver.rtc.add_on_clear,
                  self.recog_resolver.utc.add_on_clear]:
            m(self._clear_cache)

    async def all_unit_names(self):
        if not self._unit_names:
            all_units = []
            params = await self.get_params()
            for param_name in params:
                recog = params[param_name].recog
                if recog:
                    all_units.extend(recog.unit_names)
            self._unit_names = set(all_units)
        return self._unit_names

    async def get_param(self, code) -> Param:
        return await self.get_model(key=code)

    async def get_params(self) -> Dict[str, Param]:
        return await self.get_model() or {}

    async def get_signatures(self):
        if self._signatures_cache is None:
            params_config = await self.get_params()
            self._signatures_cache = Signature(params_config)
        return self._signatures_cache

    def _clear_cache(self):
        super()._clear_cache()
        self._unit_names = set()
        self._signatures_cache = None
        self._all_param_codes = None

    async def _load_model(self, doc):
        doc = await super()._load_model(doc)
        recog = doc.recog
        if recog:
            recog = await self.recog_resolver.resolve_recog(recog)
            doc.recog = recog
        return doc
