from enum import Enum
import typing
from dataclasses import field

from marshmallow import fields
from marshmallow_dataclass import dataclass

from compel_shared.conf import ConfigElement
from compel_shared.schema import DictField, OrderedSchema
from marshmallow_enum import EnumField


class Locale(str, Enum):
    RU = 'ru'
    EN = 'en'


default_locale = Locale.RU


@dataclass(base_schema=OrderedSchema)
class ProviderClassConfig(ConfigElement):
    names: typing.List[str]


@dataclass(base_schema=OrderedSchema)
class ProviderConfig(ConfigElement):
    name: str = field(default='', metadata=dict(marshmallow_field=fields.Str(title='Название провайдера')))
    description_locale: str = field(
        default=default_locale.value,
        metadata=dict(
            marshmallow_field=EnumField(Locale,
                                        load_by=EnumField.VALUE,
                                        dump_by=EnumField.VALUE,
                                        title='Язык описания',
                                        description='Язык куда будут заливаться описания продуктов')  # 64949
        )
    )


@dataclass(base_schema=OrderedSchema)
class ProvidersConfig(ConfigElement):
    order: typing.List[str]
    items: typing.Dict[str, ProviderConfig] = field(metadata=dict(
        marshmallow_field=DictField(fields.Nested(ProviderConfig.Schema), title='Источники данных')))
