import typing
from dataclasses import field

from marshmallow import fields
from marshmallow_dataclass import dataclass

from compel_shared.conf import ConfigElement
from compel_shared.schema import (
    DecimalField, DictField, OrderedSchema, MultilangField)


@dataclass(base_schema=OrderedSchema)
class SiConversion(ConfigElement):
    name: str = field(metadata=dict(title='Название правила конвертации'))
    units: typing.List[str] = field(metadata=dict(title='Единицы',
                                                  description='Единицы измерения'))
    multiplier: float = field(metadata=dict(
        marshmallow_field=DecimalField(title='Множитель',
                                       description='Множитель на который умножается единица для преобразования в СИ')))


@dataclass(base_schema=OrderedSchema)
class UnitsConfig(ConfigElement):
    multipliers: typing.Dict[str, typing.Dict[str, typing.List[str]]] = field(metadata=dict(
        marshmallow_field=DictField(
            MultilangField(fields.List(fields.Str(), as_textarea=True)),
            title='Множители',
            description='Стандартные множители которые могут встречаться в номиналах распознаваемых значений параметров',
            modifiable=True
        )
    ))
    si_conversion: typing.List[SiConversion] = field(metadata=dict(
        title='Конвертация в СИ',
        description='Преобразование единиц измерения СИ'))

    def __init__(self, multipliers: typing.Dict[str, typing.Dict[str, typing.List[str]]],
                 si_conversion: typing.List[SiConversion]):
        self.multipliers = multipliers
        self.si_conversion = si_conversion
        self.si_conv_map = {}
        for section in self.si_conversion:
            for unit in section.units:
                self.si_conv_map[unit] = section.multiplier
