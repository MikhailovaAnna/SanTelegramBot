import logging
import typing

from dataclasses import field
from marshmallow_dataclass import dataclass

from compel_shared import load_yml
from compel_shared.conf import ConfigElement
from compel_shared.conf.bom_config import BomConfig
from compel_shared.conf.mongo_mem_cache import MongoMemCache
from compel_shared.conf.product_config import ProductsConfig
from compel_shared.conf.provider_config import ProvidersConfig
from compel_shared.conf.search_config import SearchConfig
from compel_shared.conf.train_config import TrainConfig
from compel_shared.conf.units_config import UnitsConfig
from compel_shared.schema import OrderedSchema

log = logging.getLogger(__name__)


@dataclass(base_schema=OrderedSchema)
class ServiceConfigTechSchema(ConfigElement):
    m10: typing.List[str] = field(
        metadata=dict(title='m10', description='Технологические типы для срочного производства модулей'))
    ems: typing.List[str] = field(
        metadata=dict(title='ems', description='Технологические типы для контрактного производства', ))


@dataclass(base_schema=OrderedSchema)
class ServiceConfig(ConfigElement):
    products: ProductsConfig = field(metadata=dict(title='Продукты'))
    units: UnitsConfig = field(metadata=dict(title='Единицы измерения'))
    search: SearchConfig = field(metadata=dict(title='Поиск'))
    bom: BomConfig = field(metadata=dict(title='BOM'))
    train: TrainConfig = field(metadata=dict(title='Обучение'))
    providers: ProvidersConfig = field(metadata=dict(title='Источники данных'))
    tech: ServiceConfigTechSchema = field(metadata=dict(title='Технологические типы'))


class ServiceConfigCache(MongoMemCache):
    """
    При появлении новой секции в service_config добавляем схему секции в `ServiceConfigSchema`
    """
    SERVICE_CONFIG_FILE = 'service_config.yml'

    def __init__(self, db, etcd_client, size=1):
        super().__init__(db, etcd_client, 'service_config', ServiceConfig, size=size)

    async def get_section(self, section):
        data = await self.get_service_config()
        section_data = getattr(data, section)
        return section_data

    async def get_service_config(self) -> ServiceConfig:
        config = await self.get_model()
        if not config:
            raise Exception('Service config not found')
        return list(config.values())[0]

    def _yaml_data(self):
        """
        Используется при первоначальном импорте конфигурации
        """
        return load_yml(__file__, self.SERVICE_CONFIG_FILE)
