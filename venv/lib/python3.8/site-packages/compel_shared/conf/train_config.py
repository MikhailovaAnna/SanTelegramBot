import typing
from dataclasses import field

from marshmallow_dataclass import dataclass

from compel_shared.conf import ConfigElement
from compel_shared.schema import OrderedSchema


@dataclass(base_schema=OrderedSchema)
class TrainModelConfig(ConfigElement):
    n_iters: int = field(default=10, metadata=dict(
        title='Количество итераций', schema={'minimum': 1}))
    dataset_size: int = field(default=10000, metadata=dict(
        title='Размер тренировочного набора данных',
        schema={'minimum': 1},
    ))


@dataclass(base_schema=OrderedSchema)
class TrainSamplesConfig(ConfigElement):
    samples: typing.List[str] = field(metadata=dict(title='Примеры значений'))


@dataclass(base_schema=OrderedSchema)
class TrainConfig(ConfigElement):
    ner_params: TrainModelConfig = field(metadata=dict(
        title='Тренировка распознавания параметров'))
    ner_mpn: TrainModelConfig = field(metadata=dict(
        title='Тренировка распознавания MPN'))
    classifier: TrainModelConfig = field(metadata=dict(
        title='Тренировка классификатора'))
    model_id: str = field(default=None,
                          metadata=dict(title='Модель',
                                        description='Модель используемая для распознавания строк'))
