import typing
from dataclasses import field

from marshmallow import fields
from marshmallow.fields import Int
from marshmallow_dataclass import dataclass

from compel_shared.conf import ConfigElement
from compel_shared.schema import DictField, OrderedSchema


@dataclass(base_schema=OrderedSchema)
class ClassifierWeights(ConfigElement):
    params: int = field(default=100, metadata=dict(
        title='Вес классификатора по типам выделенных параметров',
        schema={'minimum': 0, 'maximum': 100},
    ))
    text: int = field(default=100, metadata=dict(
        title='Вес классификатора для выделенной подстроки класса',
        schema={'minimum': 0, 'maximum': 100},
    ))


@dataclass(base_schema=OrderedSchema)
class ClassifConfig(ConfigElement):
    classifier_type: str = field(default='Ручной', metadata=dict(
        title='Классификатор',
        description='''
Тип классификатора для распознавания:        
* `Текстовый` - класс определяется по поисковой строке. Например, `Конденсатор электролитический 2200uF 25В 20%` - `ECAP`
* `Параметрический` - класс определяется по набору параметров NER(2in1) классификатором.
* `Ручной` - класс определяется по параметрам в соответствии с правилами, заданными вручную.        
''',
        enum_values=['Текстовый', 'Параметрический', 'Ручной']
    ))


@dataclass(base_schema=OrderedSchema)
class Replacement(ConfigElement):
    find: str = field(metadata=dict(title='Что заменить'))
    replace: str = field(metadata=dict(title='На что заменить'))


@dataclass(base_schema=OrderedSchema)
class ProductsSearchConfig(ConfigElement):
    limit: int = Int(title='Лимит продуктов', example=20, default=500)


@dataclass(base_schema=OrderedSchema)
class ProductsConfig(ConfigElement):
    groups: typing.Dict[str, typing.List[str]] = field(metadata=dict(marshmallow_field=DictField(
        fields.List(fields.Str),
        title='Группы параметров',
        description='''
Значение, выделенное из поисковой строки для заголовка группы дополнительно распространяется на все параметры указанные в группе.
Например,  если параметры `impedance`, `esr` составляют группу `resistance` и в поисковой строке было 
выделено значение для параметра `resistance`, то будут также искаться продукты с параметрами `impedance` и `esr` 
совпадающими с этим значением.
Все параметры у группе должны быть однотипны и иметь одну и ту же единицу измерения.            
''',
        is_hidden=True
    )))
    classification: ClassifConfig = field(metadata=dict(title='Классификация'))
    mpn_replacement: typing.List[Replacement] = field(metadata=dict(
        title='Замена символов в MPN',
        is_hidden=False))
    search: ProductsSearchConfig = field(metadata=dict(title='Настройки поиска'))
