from typing import Dict

from Levenshtein._levenshtein import ratio
from etcd3 import AioClient
from functional import seq

from compel_shared.conf.mongo_mem_cache import MongoMemCache
from compel_shared.logger import get_logger
from compel_shared.schema import ManRecord

log = get_logger(__name__)


class ManufacturersConfig(MongoMemCache):
    """
    Раньше назывался ManTable
    """

    def __init__(self, db, etcd_client: AioClient):
        super().__init__(db, etcd_client, 'manufacturers', ManRecord, key='code',
                         cool_down=300)
        self.reverse_name_map = dict()

    async def get_manufacturers(self) -> Dict[str, ManRecord]:
        return await self.get_model()

    async def get_man_name(self, man_code):
        """
        Get manufacturer name by known code
        @param man_code:
        @return:
        """
        man = await self.get_model(key=man_code)
        if man:
            ax_producers_man = man.ax_producers_manufacturer
            if ax_producers_man:
                return ax_producers_man
        return man_code

    async def is_blocked(self, man_code) -> bool:
        man = await self.get_model(key=man_code)
        if man:
            return man.blocked
        return False

    async def get_man_code(self, man_name):
        """
        Resolve manufacturer name to nearest man code
        @param man_name:
        @return:
        """
        if not self.reverse_name_map:
            log.info('Reloading man map')
            async for man_record in self.collection.find({}):
                code = man_record['code']
                for name in man_record['names']:
                    self.reverse_name_map[name.lower()] = code

        man_name = man_name.lower()
        code = self.reverse_name_map.get(man_name)
        if code:
            return code

        if self.reverse_name_map:
            man_name = seq(self.reverse_name_map.keys()).max_by(lambda known_name: ratio(known_name, man_name))
            return self.reverse_name_map[man_name]

    def _clear_cache(self):
        super()._clear_cache()
        self.reverse_name_map = dict()
