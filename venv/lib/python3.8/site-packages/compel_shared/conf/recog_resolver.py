from compel_shared.conf.recog_template_config import RecogTemplateConfig
from compel_shared.conf.unit_template_config import UnitTemplateConfig
from compel_shared.params.param import ParamRecog
from compel_shared.params.recog_template import RecogTemplate
from compel_shared.params.unit import UnitTemplate, UnitConfig


class RecogResolver:

    def __init__(self, rtc: RecogTemplateConfig, utc: UnitTemplateConfig):
        self.rtc = rtc
        self.utc = utc

    async def resolve_recog(self, recog: ParamRecog):
        return await self._resolve_recog(recog, self.utc.get_model, self.rtc.get_model)

    @staticmethod
    async def resolve_from_db(db, recog: ParamRecog):
        unit = None
        if recog.unit_selector and recog.unit_selector.unit_id:
            unit = await db.get_collection('unit_template').find_one(dict(_id=recog.unit_selector.unit_id))
            if unit:
                unit = UnitTemplate.Schema().load(unit)
        template = None
        if recog.template_selector and recog.template_selector.template_id:
            template = await db.get_collection('recog_template').find_one(dict(_id=recog.template_selector.template_id))
            if template:
                template = RecogTemplate.Schema().load(template)

        async def unit_getter(id):
            return unit

        async def template_getter(id):
            return template

        return await RecogResolver._resolve_recog(recog, unit_getter, template_getter)

    @staticmethod
    async def _resolve_recog(recog: ParamRecog, unit_getter, template_getter):
        if recog.unit_selector:
            unit_id = recog.unit_selector.unit_id
            if unit_id and not recog.unit_selector.custom:
                unit = await unit_getter(id=unit_id)
                if not unit:
                    raise Exception(f'Broken unit ref {unit_id} in recog {recog}')
                recog.unit_selector.unit_config = UnitConfig(units=unit.units,
                                                             precision=unit.precision,
                                                             default_multiplier=unit.default_multiplier)
        if recog.template_selector:
            template_id = recog.template_selector.template_id
            if template_id and not recog.template_selector.custom:
                template = await template_getter(id=template_id)
                if not template:
                    raise Exception(f'Broken template ref {template_id} in recog {recog}')
                recog.template_selector.templates = template.templates
        return recog
