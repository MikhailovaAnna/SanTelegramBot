from aiohttp import web


def as_type(str, type):
    try:
        return type(str)
    except Exception:
        return None


class QueryModel:
    """
    Takes care about serializing query parameters in URL to/from regular Dict
    """

    def __init__(self, text=['name'],
                 numeric=['limit', 'offset']):
        """

        @param text: parameters that should not be split/merged by `,`
        @param numeric: params should be converted to numeric
        """
        self.text = text
        self.numeric = numeric

    def from_url_params(self, request):

        numeric = self.numeric

        def deserialize(k):

            def convert(v):
                if k in numeric:
                    fvalue = as_type(v, float)
                    if fvalue is not None:
                        return fvalue
                    fvalue = as_type(v, int)
                    if fvalue is not None:
                        return fvalue
                    raise web.HTTPBadRequest(text=f'Ожидалось числовое значение для {k}')
                lc = v.lower()
                if lc == 'true':
                    return True
                elif lc == 'false':
                    return False
                return v

            v = request.query[k]
            if k not in self.text:
                arr = v.split(',')
                if len(arr) > 1:
                    return [convert(e) for e in v.split(',')]
            return convert(v)

        return {k: deserialize(k) for k in request.query}

    def to_url_params(self, data):

        def convert(v):
            if type(v) == bool:
                return str(v).lower()
            return str(v)

        def serialize(k):
            v = data[k]
            if isinstance(v, list):
                return [convert(e) for e in ','.join(v)]
            return convert(v)

        return {k: serialize(k) for k in data}
