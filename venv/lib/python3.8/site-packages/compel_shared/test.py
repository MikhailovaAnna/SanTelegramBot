import asyncio
import unittest

from aiohttp import web
from aiohttp.test_utils import TestServer, TestClient

from compel_shared.config import env
from compel_shared.logger import get_logger

log = get_logger(__name__)


class DDTlist(list):
    pass


class DDTDict(dict):
    pass


def tdoc(data, name, docstring=None):
    r = DDTDict(data) if isinstance(data, dict) else DDTlist(data)
    setattr(r, "__name__", name)
    if docstring:
        setattr(r, "__doc__", docstring)
    return r


class ServiceTest(unittest.TestCase):
    loop = asyncio.get_event_loop()
    client: TestClient
    app: web.Application

    @classmethod
    async def get_application(cls):
        raise NotImplementedError()

    @classmethod
    def setUpClass(cls):
        for k in env._values:
            val = env._values[k]
            log.info(f'{k}={val}', key=k, value=val)

        async def setup():
            cls.app = await cls.get_application()
            server = TestServer(cls.app)
            cls.client = TestClient(server)
            await cls.client.start_server()
            await cls.setUpClassAsync()

        cls.loop.run_until_complete(setup())

    @classmethod
    def tearDownClass(cls):
        async def teardown():
            await cls.tearDownClassAsync()
            await cls.client.close()

        cls.loop.run_until_complete(teardown())

    @classmethod
    async def tearDownClassAsync(cls):
        pass

    @classmethod
    async def setUpClassAsync(cls):
        pass

    def setUp(self):
        self.loop.run_until_complete(self.setUpAsync())

    def tearDown(self):
        self.loop.run_until_complete(self.tearDownAsync())

    async def setUpAsync(self) -> None:
        pass

    async def tearDownAsync(self) -> None:
        pass
