import typing

from dataclasses import field
from marshmallow import Schema
from marshmallow_dataclass import dataclass

from compel_shared.schema import MongoIDSchema, OrderedSchema


@dataclass(base_schema=OrderedSchema)
class ProductName:
    value: str = field(
        default=None,
        metadata=dict(required=True,
                      title='Наименование',
                      description='Наименование продукта',
                      example='RES 0402 41R2 1%'))
    value_norm: str = field(
        default=None,
        metadata=dict(required=True,
                      title='Нормированное наименование',
                      description=f'Нормированное наименование продукта без пробелов и спецсимволов',
                      example='RES040241R21'))
    provider: str = field(
        default=None,
        metadata=dict(title='Поставщик'))
    source_type: str = field(
        default=None,
        metadata=dict(required=True,
                      title='Источник происхождения',
                      description='''
Тип выгрузки откуда брались данные:
* HD - hd_items
* SEARCH_NAMES - ax_search
* DGK - tmp_dgk
'''
                      ))


@dataclass(base_schema=Schema)
class MpnMan:
    '''
    Пара MPN/код производителя - используется для универсальной идентификации продукта.
    '''
    mpn: str = field(default=None, metadata=dict(required=True, title='MPN',
                                                 description='Manufacturing Part Number', example='MAX232DR'))
    manufacturer: str = field(default=None, metadata=dict(required=True,
                                                          title='Код производителя',
                                                          description='Универсальный код производителя в системе',
                                                          example='TI'))


@dataclass(base_schema=MongoIDSchema)
class LocalProduct(MpnMan):
    id: str = field(
        default=None,
        metadata=dict(data_key='_id', title='Уникальный ID', is_hidden=True)
    )
    params: typing.Dict[str, typing.Any] = field(
        default_factory=dict,
        metadata=dict(title='Параметры продукта',
                      description='Структура параметров и их значений'))
    axapta_id: str = field(
        default=None,
        metadata=dict(title='Axapta ID',
                      description='ID связанного продукта в системе Axapta'))
    axapta_class_id: str = field(
        default=None,
        metadata=dict(title='Axapta ID класса продукта',
                      description='ID связанного класса в системе Axapta',
                      example='04060101'))
    _class: str = field(
        default=None,
        metadata=dict(data_key='class',
                      description='Код класса распознавания/сигнатуры продукта',
                      example='RES'))
    class_id: str = field(
        default=None,
        metadata=dict(title='ID класса',
                      description='ID класса в каталоге к которому привязан продукт',
                      example='8Gg33hWQ8'))
    names: typing.List[ProductName] = field(
        default_factory=list,
        metadata=dict(title='Наименование',
                      description='Известные наименования продукта'))
    descriptions: str = field(
        default_factory=list,
        metadata=dict(title='Описания',
                      description='Известные описания продукта'))
    case: str = field(
        default=None,
        metadata=dict(title='Корпус',
                      description='Код корпуса',
                      example='BGA-448'))

    price: float = field(
        default=None,
        metadata=dict(title='Цена',
                      description='Цена продукта',
                      example=0.5)
    )
