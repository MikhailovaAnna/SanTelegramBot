from enum import Enum
from typing import List, Union

from dataclasses import field
from marshmallow_dataclass import dataclass

from compel_shared.product_schema import ProductSchema
from compel_shared.schema import pick_field_data, CRUDSchema


class ModelState(Enum):
    CREATED = 'CREATED'
    TRAINING = 'TRAINING'
    FAILED = 'FAILED'
    COMPLETE = 'COMPLETE'


class TemplateState(Enum):
    NEW = 'NEW'
    MARKED = 'MARKED'


@dataclass(base_schema=CRUDSchema)
class TrainSetMember:
    train_set_id: str = field(metadata=dict(title='ID набора', description='ID тренировочного набора'))


@dataclass
class TrainTemplate(TrainSetMember):
    line: str = field(metadata=dict(title='Строка', description='Поисковая строка клиента'))
    template: str = field(metadata=dict(title='Шаблон', description='Шаблон для подстановок значений'))
    entities: List[List[Union[int, str]]] = field(metadata=dict(title='Разметка'))
    state: TemplateState = field(default=TemplateState.NEW, metadata=dict(title='Состояние'))
    _class: str = field(default=None, metadata=pick_field_data(ProductSchema, '_class'))


@dataclass
class TrainSamples(TrainSetMember):
    label: str = field(metadata=dict(title='Метка', description='''
Метка для аннотации поисковой строки:
* _class - класс
* xxx 
* yyy$zzz - коды параметров
'''))
    sample: str = field(metadata=dict(title='Пример значения'))
    _class: str = field(default=None, metadata=pick_field_data(ProductSchema, '_class'))


@dataclass(base_schema=CRUDSchema)
class TrainSet:
    name: str = field(metadata=dict(title='Название', description='Название тренировочного набора'))


@dataclass
class ModelMetric:
    fscore: float
    tp: float
    fp: float
    fn: float


@dataclass
class TrainModel(TrainSetMember):
    metric: ModelMetric
    state: ModelState
