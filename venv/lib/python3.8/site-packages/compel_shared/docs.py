from datetime import datetime

from compel_shared.enums import *


def field_def(*docs):
    return dict(description=docs[0], example=docs[1])


def as_list_def(field_info):
    return dict(description=field_info['description'],
                example=[field_info['example']])


class FieldDocs:
    product_name = field_def('Наименование продукта в каталогах поставщиков', 'RES 0402 41R2 1%')
    product_search_name = field_def('Поисковое наименование продукта словами клиента',
                                    'SMD 0603 1.24 кОм 1%, 0.063W, 50V, -55-155°C')
    product_description = field_def('Подробное описание продукта',
                                    '0.22µF Film Capacitor 63V 100V Polyester, Metallized Radial')
    product_sig = field_def('Нормализованное название (сигнатура) продукта', 'RES 0201 6K65 0.5%')
    norm_product_name = field_def('Очищенное наименование продукта без спецсимволов', 'COP8CCR9IMT7NOPB')
    name_source_type = field_def(f'''
Источник происхождения наименования:
* {PRODUCER_PRICE_LIST} - прайс лист производителей
* {WORLD_PROVIDER} - база ДМП
* {CATALOG} - номенклатурный справочник
* {SITE_CATALOG} - каталог сайта''', CATALOG)
    created = field_def('Время создания', datetime.now().isoformat())
    updated = field_def('Время обновления', datetime.now().isoformat())
    params = field_def('Параметры продукта', {
        "resistance": 100,
        "voltage": {'ac': 250},
        "tolerance": 5,
        "case": ["0201", "0605"]
    })
    params_filter = field_def('''Фильтр по параметрам''',
                              {
                                  "resistance": 100,
                                  "voltage": {'ac': 250},
                                  "tolerance": {'$lt': 5},
                                  "case": ["0201", "0605"]
                              })
    mpn = field_def('Manufacturing Part Number - ID продукта в каталоге производителя', 'COP8CCR9IMT7/NOPB')
    manufacturer = field_def('Код производителя', 'TI')
    manufacturer_name = field_def('Название производителя', 'Texas Instruments')
    case_root = field_def('Наименование корпуса', 'SMD 0805 [2.0x1.25mm]')

    provider = field_def('ID поставщика', 'farnell')
    part_id = field_def('Код товара в каталоге поставщика', '926-COP8CCR9IMT7NOPB')

    pclass = field_def('Распознаваемый класс продукта', 'RES')
    category = field_def('Полное имя раздела / путь в каталоге', ['passive', 'capacitors', 'film-capacitors'])
    client_id = field_def('ID клиента', 'БАЗАЭЛ63RC')
    client_group_id = field_def('ID группы клиента (гиперклиент)', '5360')
    excluded = field_def('Продукт исключен из поиска', True)
    product_id = field_def('ID продукта', 'YspbdJ98N5')
    class_id = field_def('ID класса', '8Gg33hWQ8')
    param_id = field_def('ID параметра', 'ubutfa3z')
    use_other_clients = field_def('Использовать данные других клиентов при поиске', True)

    limit = field_def('Макс. количество вариантов для строки', 100)
    offset = field_def('Макс. количество вариантов для строки', 100)

    min_score = field_def('Минимальная релевантность, %', 50)
    result = field_def(f'''
Результат поиска по позиции:
* {OK} - успешное выполнение         
* {NONE} - продуктов не найдено         
* {ERROR} - ошибка при поиске
''', OK)
    result_type = field_def(f'''
    Тип распознавания:
* {AUTO} - продукт выбран автоматически
* {AUTO_CONFIRM} - выбор требует подтверждения
        ''', AUTO)
    source_type = field_def(f'''
Тип источника данных:
* {CACHE} - ответ выбран из кеша запросов
* {LOCAL} - продукт найден в каталоге Compel
* {EXTERNAL} - продукт найден во внешних каталогах
* {ERROR} - ошибка при поиске продукта
        ''', CACHE)
    search_type = field_def(f'''
Метод поиска:
* {CACHE} - ответ выбран из кеша запросов
* NAME - найдено по наименованию
* MPN - найдено по MPN (как вся поисковая строка)
* PARAMS - найдено по параметрам (в т.ч. по MPN как подстрока)
* PARAMS* - с пропуском любого числа символов от начала строки (в т.ч. для MPN)
''', CACHE)
    axapta_id = field_def('Код НЕ в Axapta', '1000047')
    request_id = field_def('ID заявки', 'YspbdJ98N5')

    score = field_def('Оценка релевантности, %', 100)
    update_session_id = field_def('ID сессии обновления', 'XXX')


class MethodDocs:
    id_or_none = {200: {'description': 'ID продукта, если был создан новый продукт'}}
    multiple_ids_description = '''
* возможен поиск по нескольким `id` через параметр `ids`, id товаров разделяются запятой, например ids=id1,id2,id3
* возможно исключение из поиска определенных `id` через параметр `exclude_ids`, id товаров разделяются запятой, например exclude_ids=id1,id2
'''
